/**
 * generated by Xtext 2.17.0
 */
package org.xtext.example.compras.compras.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.xtext.example.compras.compras.Architecture;
import org.xtext.example.compras.compras.BusinessLayer;
import org.xtext.example.compras.compras.BusinessLayerRef;
import org.xtext.example.compras.compras.CommonLayer;
import org.xtext.example.compras.compras.CommonLayerRef;
import org.xtext.example.compras.compras.ComprasPackage;
import org.xtext.example.compras.compras.ControllerSegmentLayer;
import org.xtext.example.compras.compras.ControllersRef;
import org.xtext.example.compras.compras.DataAccessLayer;
import org.xtext.example.compras.compras.DataAccessLayerRef;
import org.xtext.example.compras.compras.DbConnectorSegmentLayer;
import org.xtext.example.compras.compras.Domain;
import org.xtext.example.compras.compras.Entity;
import org.xtext.example.compras.compras.EntityField;
import org.xtext.example.compras.compras.EntityFieldLabel;
import org.xtext.example.compras.compras.EntityFieldRequired;
import org.xtext.example.compras.compras.EntityType;
import org.xtext.example.compras.compras.Functionality;
import org.xtext.example.compras.compras.ModuleTech;
import org.xtext.example.compras.compras.PresentationLayer;
import org.xtext.example.compras.compras.Relations;
import org.xtext.example.compras.compras.ScriptRef;
import org.xtext.example.compras.compras.ScriptSegmentLayer;
import org.xtext.example.compras.compras.Solution;
import org.xtext.example.compras.compras.Technology;
import org.xtext.example.compras.compras.ViewSegmentLayer;
import org.xtext.example.compras.compras.ViewsRef;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.xtext.example.compras.compras.ComprasPackage
 * @generated
 */
public class ComprasAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ComprasPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComprasAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = ComprasPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComprasSwitch<Adapter> modelSwitch =
    new ComprasSwitch<Adapter>()
    {
      @Override
      public Adapter caseSolution(Solution object)
      {
        return createSolutionAdapter();
      }
      @Override
      public Adapter caseDomain(Domain object)
      {
        return createDomainAdapter();
      }
      @Override
      public Adapter caseModule(org.xtext.example.compras.compras.Module object)
      {
        return createModuleAdapter();
      }
      @Override
      public Adapter caseEntity(Entity object)
      {
        return createEntityAdapter();
      }
      @Override
      public Adapter caseEntityField(EntityField object)
      {
        return createEntityFieldAdapter();
      }
      @Override
      public Adapter caseEntityFieldLabel(EntityFieldLabel object)
      {
        return createEntityFieldLabelAdapter();
      }
      @Override
      public Adapter caseEntityFieldRequired(EntityFieldRequired object)
      {
        return createEntityFieldRequiredAdapter();
      }
      @Override
      public Adapter caseEntityType(EntityType object)
      {
        return createEntityTypeAdapter();
      }
      @Override
      public Adapter caseFunctionality(Functionality object)
      {
        return createFunctionalityAdapter();
      }
      @Override
      public Adapter caseArchitecture(Architecture object)
      {
        return createArchitectureAdapter();
      }
      @Override
      public Adapter casePresentationLayer(PresentationLayer object)
      {
        return createPresentationLayerAdapter();
      }
      @Override
      public Adapter caseControllerSegmentLayer(ControllerSegmentLayer object)
      {
        return createControllerSegmentLayerAdapter();
      }
      @Override
      public Adapter caseViewSegmentLayer(ViewSegmentLayer object)
      {
        return createViewSegmentLayerAdapter();
      }
      @Override
      public Adapter caseScriptSegmentLayer(ScriptSegmentLayer object)
      {
        return createScriptSegmentLayerAdapter();
      }
      @Override
      public Adapter caseBusinessLayer(BusinessLayer object)
      {
        return createBusinessLayerAdapter();
      }
      @Override
      public Adapter caseDataAccessLayer(DataAccessLayer object)
      {
        return createDataAccessLayerAdapter();
      }
      @Override
      public Adapter caseDbConnectorSegmentLayer(DbConnectorSegmentLayer object)
      {
        return createDbConnectorSegmentLayerAdapter();
      }
      @Override
      public Adapter caseCommonLayer(CommonLayer object)
      {
        return createCommonLayerAdapter();
      }
      @Override
      public Adapter caseRelations(Relations object)
      {
        return createRelationsAdapter();
      }
      @Override
      public Adapter caseTechnology(Technology object)
      {
        return createTechnologyAdapter();
      }
      @Override
      public Adapter caseModuleTech(ModuleTech object)
      {
        return createModuleTechAdapter();
      }
      @Override
      public Adapter caseControllersRef(ControllersRef object)
      {
        return createControllersRefAdapter();
      }
      @Override
      public Adapter caseViewsRef(ViewsRef object)
      {
        return createViewsRefAdapter();
      }
      @Override
      public Adapter caseScriptRef(ScriptRef object)
      {
        return createScriptRefAdapter();
      }
      @Override
      public Adapter caseBusinessLayerRef(BusinessLayerRef object)
      {
        return createBusinessLayerRefAdapter();
      }
      @Override
      public Adapter caseDataAccessLayerRef(DataAccessLayerRef object)
      {
        return createDataAccessLayerRefAdapter();
      }
      @Override
      public Adapter caseCommonLayerRef(CommonLayerRef object)
      {
        return createCommonLayerRefAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.Solution <em>Solution</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.Solution
   * @generated
   */
  public Adapter createSolutionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.Domain <em>Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.Domain
   * @generated
   */
  public Adapter createDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.Module <em>Module</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.Module
   * @generated
   */
  public Adapter createModuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.Entity <em>Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.Entity
   * @generated
   */
  public Adapter createEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.EntityField <em>Entity Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.EntityField
   * @generated
   */
  public Adapter createEntityFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.EntityFieldLabel <em>Entity Field Label</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.EntityFieldLabel
   * @generated
   */
  public Adapter createEntityFieldLabelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.EntityFieldRequired <em>Entity Field Required</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.EntityFieldRequired
   * @generated
   */
  public Adapter createEntityFieldRequiredAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.EntityType <em>Entity Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.EntityType
   * @generated
   */
  public Adapter createEntityTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.Functionality <em>Functionality</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.Functionality
   * @generated
   */
  public Adapter createFunctionalityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.Architecture <em>Architecture</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.Architecture
   * @generated
   */
  public Adapter createArchitectureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.PresentationLayer <em>Presentation Layer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.PresentationLayer
   * @generated
   */
  public Adapter createPresentationLayerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.ControllerSegmentLayer <em>Controller Segment Layer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.ControllerSegmentLayer
   * @generated
   */
  public Adapter createControllerSegmentLayerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.ViewSegmentLayer <em>View Segment Layer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.ViewSegmentLayer
   * @generated
   */
  public Adapter createViewSegmentLayerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.ScriptSegmentLayer <em>Script Segment Layer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.ScriptSegmentLayer
   * @generated
   */
  public Adapter createScriptSegmentLayerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.BusinessLayer <em>Business Layer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.BusinessLayer
   * @generated
   */
  public Adapter createBusinessLayerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.DataAccessLayer <em>Data Access Layer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.DataAccessLayer
   * @generated
   */
  public Adapter createDataAccessLayerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.DbConnectorSegmentLayer <em>Db Connector Segment Layer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.DbConnectorSegmentLayer
   * @generated
   */
  public Adapter createDbConnectorSegmentLayerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.CommonLayer <em>Common Layer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.CommonLayer
   * @generated
   */
  public Adapter createCommonLayerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.Relations <em>Relations</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.Relations
   * @generated
   */
  public Adapter createRelationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.Technology <em>Technology</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.Technology
   * @generated
   */
  public Adapter createTechnologyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.ModuleTech <em>Module Tech</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.ModuleTech
   * @generated
   */
  public Adapter createModuleTechAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.ControllersRef <em>Controllers Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.ControllersRef
   * @generated
   */
  public Adapter createControllersRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.ViewsRef <em>Views Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.ViewsRef
   * @generated
   */
  public Adapter createViewsRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.ScriptRef <em>Script Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.ScriptRef
   * @generated
   */
  public Adapter createScriptRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.BusinessLayerRef <em>Business Layer Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.BusinessLayerRef
   * @generated
   */
  public Adapter createBusinessLayerRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.DataAccessLayerRef <em>Data Access Layer Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.DataAccessLayerRef
   * @generated
   */
  public Adapter createDataAccessLayerRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.compras.compras.CommonLayerRef <em>Common Layer Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.compras.compras.CommonLayerRef
   * @generated
   */
  public Adapter createCommonLayerRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //ComprasAdapterFactory
