/*
 * generated by Xtext 2.17.0
 */
package org.xtext.example.compras.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.compras.compras.Architecture;
import org.xtext.example.compras.compras.BusinessLayer;
import org.xtext.example.compras.compras.BusinessLayerRef;
import org.xtext.example.compras.compras.CommonLayer;
import org.xtext.example.compras.compras.CommonLayerRef;
import org.xtext.example.compras.compras.ComprasPackage;
import org.xtext.example.compras.compras.ControllerSegmentLayer;
import org.xtext.example.compras.compras.ControllersRef;
import org.xtext.example.compras.compras.DataAccessLayer;
import org.xtext.example.compras.compras.DataAccessLayerRef;
import org.xtext.example.compras.compras.DbConnectorSegmentLayer;
import org.xtext.example.compras.compras.Domain;
import org.xtext.example.compras.compras.Entity;
import org.xtext.example.compras.compras.EntityField;
import org.xtext.example.compras.compras.EntityFieldLabel;
import org.xtext.example.compras.compras.EntityFieldRequired;
import org.xtext.example.compras.compras.EntityType;
import org.xtext.example.compras.compras.FuncCreateAction;
import org.xtext.example.compras.compras.FuncDeleteAction;
import org.xtext.example.compras.compras.FuncEditAction;
import org.xtext.example.compras.compras.FuncViewDropDownAction;
import org.xtext.example.compras.compras.FuncViewGridAction;
import org.xtext.example.compras.compras.Functionality;
import org.xtext.example.compras.compras.ModuleTech;
import org.xtext.example.compras.compras.PresentationLayer;
import org.xtext.example.compras.compras.Relations;
import org.xtext.example.compras.compras.ScriptRef;
import org.xtext.example.compras.compras.ScriptSegmentLayer;
import org.xtext.example.compras.compras.Solution;
import org.xtext.example.compras.compras.Technology;
import org.xtext.example.compras.compras.ViewSegmentLayer;
import org.xtext.example.compras.compras.ViewsRef;
import org.xtext.example.compras.services.ComprasGrammarAccess;

@SuppressWarnings("all")
public class ComprasSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ComprasGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ComprasPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ComprasPackage.ARCHITECTURE:
				sequence_Architecture(context, (Architecture) semanticObject); 
				return; 
			case ComprasPackage.BUSINESS_LAYER:
				sequence_BusinessLayer(context, (BusinessLayer) semanticObject); 
				return; 
			case ComprasPackage.BUSINESS_LAYER_REF:
				sequence_BusinessLayerRef(context, (BusinessLayerRef) semanticObject); 
				return; 
			case ComprasPackage.COMMON_LAYER:
				sequence_CommonLayer(context, (CommonLayer) semanticObject); 
				return; 
			case ComprasPackage.COMMON_LAYER_REF:
				sequence_CommonLayerRef(context, (CommonLayerRef) semanticObject); 
				return; 
			case ComprasPackage.CONTROLLER_SEGMENT_LAYER:
				sequence_ControllerSegmentLayer(context, (ControllerSegmentLayer) semanticObject); 
				return; 
			case ComprasPackage.CONTROLLERS_REF:
				sequence_ControllersRef(context, (ControllersRef) semanticObject); 
				return; 
			case ComprasPackage.DATA_ACCESS_LAYER:
				sequence_DataAccessLayer(context, (DataAccessLayer) semanticObject); 
				return; 
			case ComprasPackage.DATA_ACCESS_LAYER_REF:
				sequence_DataAccessLayerRef(context, (DataAccessLayerRef) semanticObject); 
				return; 
			case ComprasPackage.DB_CONNECTOR_SEGMENT_LAYER:
				sequence_DbConnectorSegmentLayer(context, (DbConnectorSegmentLayer) semanticObject); 
				return; 
			case ComprasPackage.DOMAIN:
				sequence_Domain(context, (Domain) semanticObject); 
				return; 
			case ComprasPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case ComprasPackage.ENTITY_FIELD:
				sequence_EntityField(context, (EntityField) semanticObject); 
				return; 
			case ComprasPackage.ENTITY_FIELD_LABEL:
				sequence_EntityFieldLabel(context, (EntityFieldLabel) semanticObject); 
				return; 
			case ComprasPackage.ENTITY_FIELD_REQUIRED:
				sequence_EntityFieldRequired(context, (EntityFieldRequired) semanticObject); 
				return; 
			case ComprasPackage.ENTITY_TYPE:
				sequence_EntityType(context, (EntityType) semanticObject); 
				return; 
			case ComprasPackage.FUNC_CREATE_ACTION:
				sequence_FuncCreateAction(context, (FuncCreateAction) semanticObject); 
				return; 
			case ComprasPackage.FUNC_DELETE_ACTION:
				sequence_FuncDeleteAction(context, (FuncDeleteAction) semanticObject); 
				return; 
			case ComprasPackage.FUNC_EDIT_ACTION:
				sequence_FuncEditAction(context, (FuncEditAction) semanticObject); 
				return; 
			case ComprasPackage.FUNC_VIEW_DROP_DOWN_ACTION:
				sequence_FuncViewDropDownAction(context, (FuncViewDropDownAction) semanticObject); 
				return; 
			case ComprasPackage.FUNC_VIEW_GRID_ACTION:
				sequence_FuncViewGridAction(context, (FuncViewGridAction) semanticObject); 
				return; 
			case ComprasPackage.FUNCTIONALITY:
				sequence_Functionality(context, (Functionality) semanticObject); 
				return; 
			case ComprasPackage.MODULE:
				sequence_Module(context, (org.xtext.example.compras.compras.Module) semanticObject); 
				return; 
			case ComprasPackage.MODULE_TECH:
				sequence_ModuleTech(context, (ModuleTech) semanticObject); 
				return; 
			case ComprasPackage.PRESENTATION_LAYER:
				sequence_PresentationLayer(context, (PresentationLayer) semanticObject); 
				return; 
			case ComprasPackage.RELATIONS:
				sequence_Relations(context, (Relations) semanticObject); 
				return; 
			case ComprasPackage.SCRIPT_REF:
				sequence_ScriptRef(context, (ScriptRef) semanticObject); 
				return; 
			case ComprasPackage.SCRIPT_SEGMENT_LAYER:
				sequence_ScriptSegmentLayer(context, (ScriptSegmentLayer) semanticObject); 
				return; 
			case ComprasPackage.SOLUTION:
				sequence_Solution(context, (Solution) semanticObject); 
				return; 
			case ComprasPackage.TECHNOLOGY:
				sequence_Technology(context, (Technology) semanticObject); 
				return; 
			case ComprasPackage.VIEW_SEGMENT_LAYER:
				sequence_ViewSegmentLayer(context, (ViewSegmentLayer) semanticObject); 
				return; 
			case ComprasPackage.VIEWS_REF:
				sequence_ViewsRef(context, (ViewsRef) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Architecture returns Architecture
	 *
	 * Constraint:
	 *     (presentationLayer=PresentationLayer businessLayer=BusinessLayer dataAccessLayer=DataAccessLayer commonLayer=CommonLayer relations=Relations)
	 */
	protected void sequence_Architecture(ISerializationContext context, Architecture semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.ARCHITECTURE__PRESENTATION_LAYER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.ARCHITECTURE__PRESENTATION_LAYER));
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.ARCHITECTURE__BUSINESS_LAYER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.ARCHITECTURE__BUSINESS_LAYER));
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.ARCHITECTURE__DATA_ACCESS_LAYER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.ARCHITECTURE__DATA_ACCESS_LAYER));
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.ARCHITECTURE__COMMON_LAYER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.ARCHITECTURE__COMMON_LAYER));
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.ARCHITECTURE__RELATIONS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.ARCHITECTURE__RELATIONS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArchitectureAccess().getPresentationLayerPresentationLayerParserRuleCall_6_0(), semanticObject.getPresentationLayer());
		feeder.accept(grammarAccess.getArchitectureAccess().getBusinessLayerBusinessLayerParserRuleCall_9_0(), semanticObject.getBusinessLayer());
		feeder.accept(grammarAccess.getArchitectureAccess().getDataAccessLayerDataAccessLayerParserRuleCall_12_0(), semanticObject.getDataAccessLayer());
		feeder.accept(grammarAccess.getArchitectureAccess().getCommonLayerCommonLayerParserRuleCall_15_0(), semanticObject.getCommonLayer());
		feeder.accept(grammarAccess.getArchitectureAccess().getRelationsRelationsParserRuleCall_19_0(), semanticObject.getRelations());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BusinessLayerRef returns BusinessLayerRef
	 *
	 * Constraint:
	 *     functionality=[Functionality|FQN]
	 */
	protected void sequence_BusinessLayerRef(ISerializationContext context, BusinessLayerRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.BUSINESS_LAYER_REF__FUNCTIONALITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.BUSINESS_LAYER_REF__FUNCTIONALITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBusinessLayerRefAccess().getFunctionalityFunctionalityFQNParserRuleCall_2_0_1(), semanticObject.eGet(ComprasPackage.Literals.BUSINESS_LAYER_REF__FUNCTIONALITY, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BusinessLayer returns BusinessLayer
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_BusinessLayer(ISerializationContext context, BusinessLayer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.BUSINESS_LAYER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.BUSINESS_LAYER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBusinessLayerAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CommonLayerRef returns CommonLayerRef
	 *
	 * Constraint:
	 *     entity=[Entity|FQN]
	 */
	protected void sequence_CommonLayerRef(ISerializationContext context, CommonLayerRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.COMMON_LAYER_REF__ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.COMMON_LAYER_REF__ENTITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommonLayerRefAccess().getEntityEntityFQNParserRuleCall_2_0_1(), semanticObject.eGet(ComprasPackage.Literals.COMMON_LAYER_REF__ENTITY, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CommonLayer returns CommonLayer
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_CommonLayer(ISerializationContext context, CommonLayer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.COMMON_LAYER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.COMMON_LAYER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommonLayerAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ControllerSegmentLayer returns ControllerSegmentLayer
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ControllerSegmentLayer(ISerializationContext context, ControllerSegmentLayer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.CONTROLLER_SEGMENT_LAYER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.CONTROLLER_SEGMENT_LAYER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getControllerSegmentLayerAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ControllersRef returns ControllersRef
	 *
	 * Constraint:
	 *     functionality=[Functionality|FQN]
	 */
	protected void sequence_ControllersRef(ISerializationContext context, ControllersRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.CONTROLLERS_REF__FUNCTIONALITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.CONTROLLERS_REF__FUNCTIONALITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getControllersRefAccess().getFunctionalityFunctionalityFQNParserRuleCall_2_0_1(), semanticObject.eGet(ComprasPackage.Literals.CONTROLLERS_REF__FUNCTIONALITY, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DataAccessLayerRef returns DataAccessLayerRef
	 *
	 * Constraint:
	 *     functionality=[Functionality|FQN]
	 */
	protected void sequence_DataAccessLayerRef(ISerializationContext context, DataAccessLayerRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.DATA_ACCESS_LAYER_REF__FUNCTIONALITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.DATA_ACCESS_LAYER_REF__FUNCTIONALITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataAccessLayerRefAccess().getFunctionalityFunctionalityFQNParserRuleCall_2_0_1(), semanticObject.eGet(ComprasPackage.Literals.DATA_ACCESS_LAYER_REF__FUNCTIONALITY, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DataAccessLayer returns DataAccessLayer
	 *
	 * Constraint:
	 *     (name=ID dbConnectorSegmentLayer=DbConnectorSegmentLayer)
	 */
	protected void sequence_DataAccessLayer(ISerializationContext context, DataAccessLayer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.DATA_ACCESS_LAYER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.DATA_ACCESS_LAYER__NAME));
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.DATA_ACCESS_LAYER__DB_CONNECTOR_SEGMENT_LAYER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.DATA_ACCESS_LAYER__DB_CONNECTOR_SEGMENT_LAYER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataAccessLayerAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDataAccessLayerAccess().getDbConnectorSegmentLayerDbConnectorSegmentLayerParserRuleCall_5_0(), semanticObject.getDbConnectorSegmentLayer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DbConnectorSegmentLayer returns DbConnectorSegmentLayer
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_DbConnectorSegmentLayer(ISerializationContext context, DbConnectorSegmentLayer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.DB_CONNECTOR_SEGMENT_LAYER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.DB_CONNECTOR_SEGMENT_LAYER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDbConnectorSegmentLayerAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Domain returns Domain
	 *
	 * Constraint:
	 *     module+=Module+
	 */
	protected void sequence_Domain(ISerializationContext context, Domain semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EntityFieldLabel returns EntityFieldLabel
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_EntityFieldLabel(ISerializationContext context, EntityFieldLabel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.ENTITY_FIELD_LABEL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.ENTITY_FIELD_LABEL__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEntityFieldLabelAccess().getNameSTRINGTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EntityFieldRequired returns EntityFieldRequired
	 *
	 * Constraint:
	 *     name='required'
	 */
	protected void sequence_EntityFieldRequired(ISerializationContext context, EntityFieldRequired semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.ENTITY_FIELD_REQUIRED__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.ENTITY_FIELD_REQUIRED__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEntityFieldRequiredAccess().getNameRequiredKeyword_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EntityField returns EntityField
	 *
	 * Constraint:
	 *     (entityFieldRequired=EntityFieldRequired? entityFieldLabel=EntityFieldLabel? entityType=EntityType name=ID)
	 */
	protected void sequence_EntityField(ISerializationContext context, EntityField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EntityType returns EntityType
	 *
	 * Constraint:
	 *     (entity=[Entity|FQN] | commonFieldType=CommonFieldType)
	 */
	protected void sequence_EntityType(ISerializationContext context, EntityType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=ID entityField+=EntityField*)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalityActionType returns FuncCreateAction
	 *     FuncCreateAction returns FuncCreateAction
	 *
	 * Constraint:
	 *     name='CREATE'
	 */
	protected void sequence_FuncCreateAction(ISerializationContext context, FuncCreateAction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.FUNCTIONALITY_ACTION_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.FUNCTIONALITY_ACTION_TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFuncCreateActionAccess().getNameCREATEKeyword_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalityActionType returns FuncDeleteAction
	 *     FuncDeleteAction returns FuncDeleteAction
	 *
	 * Constraint:
	 *     name='DELETE'
	 */
	protected void sequence_FuncDeleteAction(ISerializationContext context, FuncDeleteAction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.FUNCTIONALITY_ACTION_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.FUNCTIONALITY_ACTION_TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFuncDeleteActionAccess().getNameDELETEKeyword_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalityActionType returns FuncEditAction
	 *     FuncEditAction returns FuncEditAction
	 *
	 * Constraint:
	 *     name='EDIT'
	 */
	protected void sequence_FuncEditAction(ISerializationContext context, FuncEditAction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.FUNCTIONALITY_ACTION_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.FUNCTIONALITY_ACTION_TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFuncEditActionAccess().getNameEDITKeyword_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalityActionType returns FuncViewDropDownAction
	 *     FuncViewDropDownAction returns FuncViewDropDownAction
	 *
	 * Constraint:
	 *     name='VIEW_DROPDOWN'
	 */
	protected void sequence_FuncViewDropDownAction(ISerializationContext context, FuncViewDropDownAction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.FUNCTIONALITY_ACTION_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.FUNCTIONALITY_ACTION_TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFuncViewDropDownActionAccess().getNameVIEW_DROPDOWNKeyword_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalityActionType returns FuncViewGridAction
	 *     FuncViewGridAction returns FuncViewGridAction
	 *
	 * Constraint:
	 *     name='VIEW_GRID'
	 */
	protected void sequence_FuncViewGridAction(ISerializationContext context, FuncViewGridAction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.FUNCTIONALITY_ACTION_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.FUNCTIONALITY_ACTION_TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFuncViewGridActionAccess().getNameVIEW_GRIDKeyword_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Functionality returns Functionality
	 *
	 * Constraint:
	 *     (name=ID entity=[Entity|FQN] functionalityActionType+=FunctionalityActionType*)
	 */
	protected void sequence_Functionality(ISerializationContext context, Functionality semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModuleTech returns ModuleTech
	 *
	 * Constraint:
	 *     (
	 *         name=[Module|ID] 
	 *         presentationLayer=[PresentationLayer|ID] 
	 *         (controllerSegmentLayer=[ControllerSegmentLayer|FQN] controllersRef+=ControllersRef*)? 
	 *         (viewSegmentLayer=[ViewSegmentLayer|FQN] viewsRef+=ViewsRef*)? 
	 *         (scriptSegmentLayer=[ScriptSegmentLayer|FQN] scriptRef+=ScriptRef*)? 
	 *         businessLayer=[BusinessLayer|ID] 
	 *         businessLayerRef+=BusinessLayerRef* 
	 *         dataAccessLayer=[DataAccessLayer|ID] 
	 *         dataAccessLayerRef+=DataAccessLayerRef* 
	 *         commonLayer=[CommonLayer|ID] 
	 *         commonLayerRef+=CommonLayerRef*
	 *     )
	 */
	protected void sequence_ModuleTech(ISerializationContext context, ModuleTech semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Module returns Module
	 *
	 * Constraint:
	 *     (name=ID entity+=Entity* functionality+=Functionality*)
	 */
	protected void sequence_Module(ISerializationContext context, org.xtext.example.compras.compras.Module semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PresentationLayer returns PresentationLayer
	 *
	 * Constraint:
	 *     (name=ID controllerSegmentLayer=ControllerSegmentLayer viewSegmentLayer=ViewSegmentLayer scriptegmentLayer=ScriptSegmentLayer)
	 */
	protected void sequence_PresentationLayer(ISerializationContext context, PresentationLayer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.PRESENTATION_LAYER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.PRESENTATION_LAYER__NAME));
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.PRESENTATION_LAYER__CONTROLLER_SEGMENT_LAYER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.PRESENTATION_LAYER__CONTROLLER_SEGMENT_LAYER));
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.PRESENTATION_LAYER__VIEW_SEGMENT_LAYER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.PRESENTATION_LAYER__VIEW_SEGMENT_LAYER));
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.PRESENTATION_LAYER__SCRIPTEGMENT_LAYER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.PRESENTATION_LAYER__SCRIPTEGMENT_LAYER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPresentationLayerAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPresentationLayerAccess().getControllerSegmentLayerControllerSegmentLayerParserRuleCall_5_0(), semanticObject.getControllerSegmentLayer());
		feeder.accept(grammarAccess.getPresentationLayerAccess().getViewSegmentLayerViewSegmentLayerParserRuleCall_8_0(), semanticObject.getViewSegmentLayer());
		feeder.accept(grammarAccess.getPresentationLayerAccess().getScriptegmentLayerScriptSegmentLayerParserRuleCall_11_0(), semanticObject.getScriptegmentLayer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Relations returns Relations
	 *
	 * Constraint:
	 *     (
	 *         sourceLayer1=[PresentationLayer|ID] 
	 *         relationsType1=RelationsType 
	 *         targetLayer1=[BusinessLayer|ID] 
	 *         sourceLayer2=[BusinessLayer|ID] 
	 *         relationsType2=RelationsType 
	 *         targetLayer2=[DataAccessLayer|ID] 
	 *         sourceLayer3=[DataAccessLayer|ID] 
	 *         relationsType3=RelationsType 
	 *         targetLayer3=[CommonLayer|ID] 
	 *         sourceLayer4=[PresentationLayer|ID] 
	 *         relationsType4=RelationsType 
	 *         targetLayer4=[CommonLayer|ID] 
	 *         sourceLayer5=[BusinessLayer|ID] 
	 *         relationsType5=RelationsType 
	 *         targetLayer5=[CommonLayer|ID]
	 *     )
	 */
	protected void sequence_Relations(ISerializationContext context, Relations semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.RELATIONS__SOURCE_LAYER1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.RELATIONS__SOURCE_LAYER1));
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.RELATIONS__RELATIONS_TYPE1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.RELATIONS__RELATIONS_TYPE1));
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.RELATIONS__TARGET_LAYER1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.RELATIONS__TARGET_LAYER1));
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.RELATIONS__SOURCE_LAYER2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.RELATIONS__SOURCE_LAYER2));
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.RELATIONS__RELATIONS_TYPE2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.RELATIONS__RELATIONS_TYPE2));
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.RELATIONS__TARGET_LAYER2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.RELATIONS__TARGET_LAYER2));
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.RELATIONS__SOURCE_LAYER3) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.RELATIONS__SOURCE_LAYER3));
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.RELATIONS__RELATIONS_TYPE3) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.RELATIONS__RELATIONS_TYPE3));
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.RELATIONS__TARGET_LAYER3) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.RELATIONS__TARGET_LAYER3));
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.RELATIONS__SOURCE_LAYER4) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.RELATIONS__SOURCE_LAYER4));
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.RELATIONS__RELATIONS_TYPE4) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.RELATIONS__RELATIONS_TYPE4));
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.RELATIONS__TARGET_LAYER4) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.RELATIONS__TARGET_LAYER4));
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.RELATIONS__SOURCE_LAYER5) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.RELATIONS__SOURCE_LAYER5));
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.RELATIONS__RELATIONS_TYPE5) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.RELATIONS__RELATIONS_TYPE5));
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.RELATIONS__TARGET_LAYER5) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.RELATIONS__TARGET_LAYER5));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelationsAccess().getSourceLayer1PresentationLayerIDTerminalRuleCall_1_0_1(), semanticObject.eGet(ComprasPackage.Literals.RELATIONS__SOURCE_LAYER1, false));
		feeder.accept(grammarAccess.getRelationsAccess().getRelationsType1RelationsTypeEnumRuleCall_2_0(), semanticObject.getRelationsType1());
		feeder.accept(grammarAccess.getRelationsAccess().getTargetLayer1BusinessLayerIDTerminalRuleCall_3_0_1(), semanticObject.eGet(ComprasPackage.Literals.RELATIONS__TARGET_LAYER1, false));
		feeder.accept(grammarAccess.getRelationsAccess().getSourceLayer2BusinessLayerIDTerminalRuleCall_4_0_1(), semanticObject.eGet(ComprasPackage.Literals.RELATIONS__SOURCE_LAYER2, false));
		feeder.accept(grammarAccess.getRelationsAccess().getRelationsType2RelationsTypeEnumRuleCall_5_0(), semanticObject.getRelationsType2());
		feeder.accept(grammarAccess.getRelationsAccess().getTargetLayer2DataAccessLayerIDTerminalRuleCall_6_0_1(), semanticObject.eGet(ComprasPackage.Literals.RELATIONS__TARGET_LAYER2, false));
		feeder.accept(grammarAccess.getRelationsAccess().getSourceLayer3DataAccessLayerIDTerminalRuleCall_7_0_1(), semanticObject.eGet(ComprasPackage.Literals.RELATIONS__SOURCE_LAYER3, false));
		feeder.accept(grammarAccess.getRelationsAccess().getRelationsType3RelationsTypeEnumRuleCall_8_0(), semanticObject.getRelationsType3());
		feeder.accept(grammarAccess.getRelationsAccess().getTargetLayer3CommonLayerIDTerminalRuleCall_9_0_1(), semanticObject.eGet(ComprasPackage.Literals.RELATIONS__TARGET_LAYER3, false));
		feeder.accept(grammarAccess.getRelationsAccess().getSourceLayer4PresentationLayerIDTerminalRuleCall_10_0_1(), semanticObject.eGet(ComprasPackage.Literals.RELATIONS__SOURCE_LAYER4, false));
		feeder.accept(grammarAccess.getRelationsAccess().getRelationsType4RelationsTypeEnumRuleCall_11_0(), semanticObject.getRelationsType4());
		feeder.accept(grammarAccess.getRelationsAccess().getTargetLayer4CommonLayerIDTerminalRuleCall_12_0_1(), semanticObject.eGet(ComprasPackage.Literals.RELATIONS__TARGET_LAYER4, false));
		feeder.accept(grammarAccess.getRelationsAccess().getSourceLayer5BusinessLayerIDTerminalRuleCall_13_0_1(), semanticObject.eGet(ComprasPackage.Literals.RELATIONS__SOURCE_LAYER5, false));
		feeder.accept(grammarAccess.getRelationsAccess().getRelationsType5RelationsTypeEnumRuleCall_14_0(), semanticObject.getRelationsType5());
		feeder.accept(grammarAccess.getRelationsAccess().getTargetLayer5CommonLayerIDTerminalRuleCall_15_0_1(), semanticObject.eGet(ComprasPackage.Literals.RELATIONS__TARGET_LAYER5, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ScriptRef returns ScriptRef
	 *
	 * Constraint:
	 *     functionality=[Functionality|FQN]
	 */
	protected void sequence_ScriptRef(ISerializationContext context, ScriptRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.SCRIPT_REF__FUNCTIONALITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.SCRIPT_REF__FUNCTIONALITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getScriptRefAccess().getFunctionalityFunctionalityFQNParserRuleCall_2_0_1(), semanticObject.eGet(ComprasPackage.Literals.SCRIPT_REF__FUNCTIONALITY, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ScriptSegmentLayer returns ScriptSegmentLayer
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ScriptSegmentLayer(ISerializationContext context, ScriptSegmentLayer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.SCRIPT_SEGMENT_LAYER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.SCRIPT_SEGMENT_LAYER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getScriptSegmentLayerAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Solution returns Solution
	 *
	 * Constraint:
	 *     (name=ID domain=Domain? architecture=Architecture? technology=Technology?)
	 */
	protected void sequence_Solution(ISerializationContext context, Solution semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Technology returns Technology
	 *
	 * Constraint:
	 *     (
	 *         moduleTech+=ModuleTech* 
	 *         (dbConnectorSegmentLayer=[DbConnectorSegmentLayer|FQN] databaseRDBMSType=DatabaseRDBMSType? connectionString=ConnectionString?)? 
	 *         dataFileSeed=DataFileSeed?
	 *     )
	 */
	protected void sequence_Technology(ISerializationContext context, Technology semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ViewSegmentLayer returns ViewSegmentLayer
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ViewSegmentLayer(ISerializationContext context, ViewSegmentLayer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.VIEW_SEGMENT_LAYER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.VIEW_SEGMENT_LAYER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getViewSegmentLayerAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ViewsRef returns ViewsRef
	 *
	 * Constraint:
	 *     functionality=[Functionality|FQN]
	 */
	protected void sequence_ViewsRef(ISerializationContext context, ViewsRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ComprasPackage.Literals.VIEWS_REF__FUNCTIONALITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ComprasPackage.Literals.VIEWS_REF__FUNCTIONALITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getViewsRefAccess().getFunctionalityFunctionalityFQNParserRuleCall_2_0_1(), semanticObject.eGet(ComprasPackage.Literals.VIEWS_REF__FUNCTIONALITY, false));
		feeder.finish();
	}
	
	
}
